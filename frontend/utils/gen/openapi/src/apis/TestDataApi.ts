/* tslint:disable */
/* eslint-disable */
/**
 * YourAPI
 * The API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FirstDTO,
    FirstDTOFromJSON,
    FirstDTOToJSON,
    SecondDTO,
    SecondDTOFromJSON,
    SecondDTOToJSON,
} from '../models';

export interface FirstControllerCheckSteamUserRequest {
    id: string;
}

export interface SecondControllerSaveBidRequest {
    secondDTO: SecondDTO;
}

/**
 * TestDataApi - interface
 * 
 * @export
 * @interface TestDataApiInterface
 */
export interface TestDataApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestDataApiInterface
     */
    firstControllerCheckSteamUserRaw(requestParameters: FirstControllerCheckSteamUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FirstDTO>>;

    /**
     */
    firstControllerCheckSteamUser(requestParameters: FirstControllerCheckSteamUserRequest, initOverrides?: RequestInit): Promise<FirstDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestDataApiInterface
     */
    secondControllerGetAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SecondDTO>>>;

    /**
     */
    secondControllerGetAll(initOverrides?: RequestInit): Promise<Array<SecondDTO>>;

    /**
     * 
     * @param {SecondDTO} secondDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestDataApiInterface
     */
    secondControllerSaveBidRaw(requestParameters: SecondControllerSaveBidRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     */
    secondControllerSaveBid(requestParameters: SecondControllerSaveBidRequest, initOverrides?: RequestInit): Promise<void>;

}

/**
 * 
 */
export class TestDataApi extends runtime.BaseAPI implements TestDataApiInterface {

    /**
     */
    async firstControllerCheckSteamUserRaw(requestParameters: FirstControllerCheckSteamUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FirstDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling firstControllerCheckSteamUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/first/saveone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FirstDTOFromJSON(jsonValue));
    }

    /**
     */
    async firstControllerCheckSteamUser(requestParameters: FirstControllerCheckSteamUserRequest, initOverrides?: RequestInit): Promise<FirstDTO> {
        const response = await this.firstControllerCheckSteamUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async secondControllerGetAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SecondDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/second`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecondDTOFromJSON));
    }

    /**
     */
    async secondControllerGetAll(initOverrides?: RequestInit): Promise<Array<SecondDTO>> {
        const response = await this.secondControllerGetAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async secondControllerSaveBidRaw(requestParameters: SecondControllerSaveBidRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.secondDTO === null || requestParameters.secondDTO === undefined) {
            throw new runtime.RequiredError('secondDTO','Required parameter requestParameters.secondDTO was null or undefined when calling secondControllerSaveBid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/second`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecondDTOToJSON(requestParameters.secondDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async secondControllerSaveBid(requestParameters: SecondControllerSaveBidRequest, initOverrides?: RequestInit): Promise<void> {
        await this.secondControllerSaveBidRaw(requestParameters, initOverrides);
    }

}
